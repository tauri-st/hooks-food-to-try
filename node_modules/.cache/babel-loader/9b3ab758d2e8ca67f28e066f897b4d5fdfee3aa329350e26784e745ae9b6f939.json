{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\skillcrush\\\\break-into-tech\\\\react\\\\hooks\\\\hooks-food-to-try\\\\src\\\\NewFoodInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n//9. Make sure the component accepts props as a parameter\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewFoodInput = props => {\n  _s();\n  /*1. create a variable to keep track of the state of the food \r\n  item the user types in the input. Set the initial value of \r\n  the useState() to an empty string: (\"\").*/\n  const [food, setFood] = useState(\"\");\n  {/*4. Create an updateFood function to call the setFood \r\n   updater function by passing it the onChange event below*/}\n  const updateFood = e => {\n    setFood(e.target.value);\n  };\n  /*10. Create a handleSubmit function which will fire\r\n  whenever the user clicks on the \"Add to the list\" button*/\n  const handleSubmit = e => {\n    e.preventDefault();\n    /* 12. Use the addFoodItem function from the App component \r\n    and give it the food you’ve kept in state */\n    if (food !== \"\") {\n      props.addFoodItem(food);\n    }\n    setFood(\"\");\n  };\n  return (\n    /*#__PURE__*/\n    //11. Add an onSubmit handler with handleSubmit as a value\n    _jsxDEV(\"form\", {\n      className: \"food-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: food,\n        onChange: updateFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add to the list!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(NewFoodInput, \"KBCIu/RJZsiM4BFqdhKEp3Je5Yc=\");\n_c = NewFoodInput;\nexport default NewFoodInput;\nvar _c;\n$RefreshReg$(_c, \"NewFoodInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NewFoodInput","props","_s","food","setFood","updateFood","e","target","value","handleSubmit","preventDefault","addFoodItem","className","onSubmit","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/skillcrush/break-into-tech/react/hooks/hooks-food-to-try/src/NewFoodInput.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n//9. Make sure the component accepts props as a parameter\r\nconst NewFoodInput = (props) => {\r\n  /*1. create a variable to keep track of the state of the food \r\n  item the user types in the input. Set the initial value of \r\n  the useState() to an empty string: (\"\").*/\r\n  const [ food, setFood ] = useState(\"\");\r\n  {/*4. Create an updateFood function to call the setFood \r\nupdater function by passing it the onChange event below*/}\r\n  const updateFood = (e) => {\r\n    setFood(e.target.value);\r\n  };\r\n  /*10. Create a handleSubmit function which will fire\r\n  whenever the user clicks on the \"Add to the list\" button*/\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* 12. Use the addFoodItem function from the App component \r\n    and give it the food you’ve kept in state */\r\n    if (food !== \"\") {\r\n      props.addFoodItem(food);\r\n    }\r\n    setFood(\"\");\r\n  };\r\n\r\n  return (\r\n    //11. Add an onSubmit handler with handleSubmit as a value\r\n    <form className=\"food-form\" onSubmit={handleSubmit}>\r\n      {/*2. Add the value and attribute that is equal to the food state value*/}\r\n      {/*3. Add on onChange handler*/}\r\n      <input type=\"text\" value={food} onChange={updateFood}/>\r\n      <button>Add to the list!</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewFoodInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B;AACF;AACA;EACE,MAAM,CAAEC,IAAI,EAAEC,OAAO,CAAE,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,CAAC;AACH,4DADG;EAED,MAAMQ,UAAU,GAAIC,CAAC,IAAK;IACxBF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EACD;AACF;EACA,MAAMC,YAAY,GAAIH,CAAC,IAAK;IACxBA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB;AACJ;IACI,IAAIP,IAAI,KAAK,EAAE,EAAE;MACfF,KAAK,CAACU,WAAW,CAACR,IAAI,CAAC;IACzB;IACAC,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED;IAAA;IACE;IACAL,OAAA;MAAMa,SAAS,EAAC,WAAW;MAACC,QAAQ,EAAEJ,YAAa;MAAAK,QAAA,gBAGjDf,OAAA;QAAOgB,IAAI,EAAC,MAAM;QAACP,KAAK,EAAEL,IAAK;QAACa,QAAQ,EAAEX;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACvDrB,OAAA;QAAAe,QAAA,EAAQ;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC;AAEX,CAAC;AAAClB,EAAA,CA/BIF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}